// This file is generated by FBC.

#ifndef COMMCHANNEL_H_
#define COMMCHANNEL_H_

#include "fbtypes.h"
@copyFile#../PUBSUB/pubsub.h
@copyFile#../PUBSUB/pubsub.c
#include "pubsub.h"
@copyFile#../nxtControl/NxtCommunication.h
@copyFile#../nxtControl/NxtCommunication.c
#include "NxtCommunication.h"
@copyFile#../../../nxtHMIServer/NxtHMIData.h
@copyFile#../../../nxtHMIServer/NxtHMIData.c





typedef union {
    UDINT events;
    struct {
        UDINT INIT : 1; // INIT
    } event;
} COMMCHANNELIEvents;

typedef union {
    UDINT events;
    struct {
        UDINT INITO : 1; // INITO
		UDINT CLNTESTABLISHED : 1; // INITO
		UDINT CLNTCLOSED : 1; // INITO
		UDINT SRVRESTABLISHED : 1; // INITO
		UDINT SRVRCLOSED : 1; // INITO
    } event;
} COMMCHANNELOEvents;

typedef struct {
    UINT _state;
    BOOL _entered;

    COMMCHANNELIEvents _input;
    COMMCHANNELOEvents _output;
	
	// Inputs
	BOOL _QI;
	char _PROTO;
	char _OWNADDR[32];
    char _PEERADDR[32];
	ULINT _ID;
	UINT _ALIVE;
	
	// Outputs
	BOOL _CLNTQO;
	char _CLNTSTATUS[32];
	BOOL _SRVRQO;
	char _SRVRSTATUS[32];

	BOOL inited;
#ifdef _MSC_VER
	SOCKET channelSendSock;//, current_client;
#else
	int channelSendSock;//, current_client;
#endif

	struct sockaddr_in myAddr;
	struct sockaddr_in dstAddr;

	struct timeval lastKeepAlive;
	char keepAlive[128];
	int keepAliveLen;

	// Linked list of Publishers
	BufferLinkedList pubData;

} COMMCHANNEL;

// GLOBAL

 struct COMMCHANNEL_el
    {
		COMMCHANNEL *channel;
	struct COMMCHANNEL_el *next;
    };

	typedef struct COMMCHANNEL_el COMMCHANNELLinkedList;
	
// Global linked list of available channels
COMMCHANNELLinkedList commChannels;

void addChannel(COMMCHANNEL* me);

COMMCHANNEL* getChannel(unsigned long long id);

//  END GLOBAL

/* COMMCHANNEL initialization function */
void COMMCHANNELinit(COMMCHANNEL* me);


/* COMMCHANNEL execution function */
void COMMCHANNELrun(COMMCHANNEL* me);

int COMMCHANNELopen(COMMCHANNEL* me, char* peerAddr);
void COMMCHANNELsend(COMMCHANNEL* me);
void COMMCHANNELaddPublisher(COMMCHANNEL* me, char* buffer, int* buflen);

#endif	// COMMCHANNEL_H_
