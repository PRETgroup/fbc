package fbtostrl;

import java.io.*;
import java.util.*;

import ccode.CGenerator;
import fb.*;
import ir.*;

public class SimHelpers {
	private static String simDef;
	private static CodePrinter sprinter; // Sim Printer QT / socket
	private static CodePrinter shprinter; // Sim header QT / socket
	public static String[] extraCFiles = {"Simulation.c"}; // NxtHMIServerConfig changes to device specific version
	public static String[] extraCLibs = {"mxml1.lib"};//, "WinMM.Lib", "WS2_32.Lib", "WSock32.Lib"}; // NxtHMIServerConfig changes to device specific version
	
	private static Hashtable<String,String> instances = new Hashtable<String,String>();
	private static Hashtable<String,FunctionBlock> blocks = new Hashtable<String,FunctionBlock>(); 
	
	/**
	 * Copy the extra files and libs used for simulation to dest folder (FBtoStrl.opts.outputPath)
	 * @throws IOException
	 */
	private static void copyResourceFiles() throws IOException
	{
		// Copy the server files
		String[] filenames = {"libmxml.a","mxml.h","mxml1.lib", "mxml1.dll", "Simulation.c", "Simulation.h"}; // "WinMM.Lib", "WS2_32.Lib", "WSock32.Lib", "msvcr100d.dll",
		//
		for(String filename : filenames)
		{
			File infile = new File("resources"+File.separator+"simulation"+File.separator+filename);
			File outfile = new File(FBtoStrl.opts.outputpath() + filename);
			
			InputStream in = new FileInputStream(infile);
			      
			OutputStream out = new FileOutputStream(outfile);
			byte[] buf = new byte[1024];
			int len;
			while ((len = in.read(buf)) > 0){
			  out.write(buf, 0, len);
			}
			in.close();
			out.close();
			
		}	
	}
	
	
	/**
	 * Initialise top level simulation config files
	 * @param fileName - Name of function block output file (sim.c/h gets appended for writing)
	 * @param fb - FunctionBlock which is top level block for this simulation
	 * @throws IOException
	 */
	public static void startSimFiles(String fileName, FunctionBlock fb) throws IOException
	{
		String cname = fileName + "sim.c";
		sprinter = new CodePrinter(cname);
		cname = fileName + "sim.h";
		shprinter = new CodePrinter(cname);
		
		String simHeader = CodeGenerator.getFileName(cname);
		simDef = CodeGenerator.makeHeaderMacro(simHeader);
		shprinter.print("// This file is generated by FBC.", 1);
		shprinter.print("#ifndef " + simDef);
		shprinter.print("#define " + simDef, 1);
		
		shprinter.print("#include <stdio.h>");
		shprinter.print("#include <stdlib.h>");
		shprinter.print("#include <string.h>");
		shprinter.print("#include \"mxml.h\"");
		shprinter.print("#include \"Simulation.h\"");
		shprinter.print("#include \""+fb.getCompiledType()+".h\"");
		shprinter.println();
		/*
		shprinter.print("typedef char bool;");
		shprinter.print("#define true 1");
		shprinter.print("#define false 0",1);
		
		shprinter.println("struct str_el");
		shprinter.println("{");
		shprinter.indent();
		shprinter.println("char str[128]; // instead of char*");
		shprinter.println("bool inuse; // needed cause str may intensionally me empty :(");
		shprinter.println("struct str_el* next;");
		shprinter.unindent();
		shprinter.println("};");
		shprinter.println("");
		shprinter.println("typedef struct str_el StringLinkedList;");
		
		
		shprinter.println();
		shprinter.println("typedef struct {");
		shprinter.indent();
			shprinter.println("char name[32];");
		shprinter.unindent();
		shprinter.println("} Event;");
		shprinter.println();
		
		shprinter.println();
		shprinter.println("typedef struct {");
		shprinter.indent();
			shprinter.println("char name[32];");
			shprinter.println("char type[16];");
			shprinter.println("char arraysize[4];");
			shprinter.println("char initialValue[16];");
		shprinter.unindent();
		shprinter.println("} VarDeclaration;");
		shprinter.println();
		
		
		shprinter.println();
		shprinter.println("typedef struct {");
		shprinter.indent();
		
			shprinter.println("int inputeventcount;");
			shprinter.println("Event EventInputs[20];");
			
			shprinter.println("int outputeventcount;");
			shprinter.println("Event EventOutputs[20];");
			
			shprinter.println("int inputvarcount;");
			shprinter.println("VarDeclaration InputVars[20];");
			
			shprinter.println("int outputvarcount;");
			shprinter.println("VarDeclaration OutputVars[20];");
			
			shprinter.println("char startstate[32];");
			
			
		shprinter.unindent();
		shprinter.println("} FunctionBlock;");
		shprinter.println();
		
		*/
		
		

		
		//shprinter.println("void appendTransitionToStatuses(mxml_node_t* simdata, char* srcState, char* destState, char* condition);");
		//shprinter.println("void appendEventOutputToStatuses(mxml_node_t* simdata, char* eventName);");
		//shprinter.println("void appendVarToStatuses(mxml_node_t* simdata, char* varname, void* value, char* vartype, int arraylen);");
		//shprinter.println("void printLinkedList(StringLinkedList* statuses);");
		//shprinter.println("void voidToString(void* value, IEC61131Type type, int arraylen, char* result);");
		//shprinter.println("void stringToVoid(char* value, IEC61131Type type, int arraylen, void* result);");
		
		//shprinter.println("void deleteNext(mxml_node_t* child);");
		shprinter.println("void handleTickCommand(mxml_node_t* tree, mxml_node_t* tickNode, "+fb.getCompiledType()+"* me);");
		
		
		//shprinter.println("void printFunctionBlockByName(char* instancename);");
		//shprinter.println("void printFunctionBlock(FunctionBlock* fb);");
		//shprinter.println("void printFunctionBlockStatuses(char* instancename);");
		
		sprinter.print("#include \""+fb.getCompiledType()+"sim.h\"");
		
		sprinter.println("#ifdef _MSC_VER");
		sprinter.println("#include <Winsock2.h>");
		sprinter.println("#else");
		sprinter.println("#include <sys/socket.h>");
		sprinter.println("#include <netinet/in.h>");
		sprinter.println("#include <arpa/inet.h>");
		sprinter.println("#include <unistd.h>");
		sprinter.println("#endif");
		sprinter.println();
		
		/******** printFunctionBlock ********/
		/*sprinter.println("void printFunctionBlock(FunctionBlock* fb){");
		sprinter.indent();
		sprinter.println("int e = 0, v = 0;");
		
		sprinter.println("printf(\"<Initialize>\\n\");");
		sprinter.println("printf(\"<EventInputs>\\n\");");
		
		sprinter.println("for(e = 0; e < fb->inputeventcount; e++){");
		sprinter.indent();
		sprinter.println("printf(\"\t<Event Name=\\\"%s\\\" />\\n\", fb->EventInputs[e].name);");
		sprinter.unindent();
		sprinter.println("}");
		
		sprinter.println("printf(\"</EventInputs>\\n\");");
		
		sprinter.println("printf(\"<EventOutputs>\\n\");");
		
		sprinter.println("for(e = 0; e < fb->outputeventcount; e++){");
		sprinter.indent();
		sprinter.println("printf(\"\t<Event Name=\\\"%s\\\" />\\n\", fb->EventOutputs[e].name);");
		sprinter.unindent();
		sprinter.println("}");
		
		sprinter.println("printf(\"</EventOutputs>\\n\");");
		
		sprinter.println("printf(\"<InputVars>\\n\");");
		
		sprinter.println("for(e = 0; e < fb->inputvarcount; e++){");
		sprinter.indent();
		sprinter.println("printf(\"\t<VarDeclaration Name=\\\"%s\\\" Type=\\\"%s\\\" ArraySize=\\\"%s\\\" InitialValue=\\\"%s\\\" />\\n\", fb->InputVars[e].name, fb->InputVars[e].type, fb->InputVars[e].arraysize, fb->InputVars[e].initialValue);");
		sprinter.unindent();
		sprinter.println("}");
		
		sprinter.println("printf(\"</InputVars>\\n\");");
		
		sprinter.println("printf(\"<OutputVars>\\n\");");
		
		sprinter.println("for(e = 0; e < fb->outputvarcount; e++){");
		sprinter.indent();
		sprinter.println("printf(\"\t<VarDeclaration Name=\\\"%s\\\" Type=\\\"%s\\\" ArraySize=\\\"%s\\\" InitialValue=\\\"%s\\\" />\\n\", fb->OutputVars[e].name, fb->OutputVars[e].type, fb->OutputVars[e].arraysize, fb->OutputVars[e].initialValue);");
		sprinter.unindent();
		sprinter.println("}");
		
		sprinter.println("printf(\"</OutputVars>\\n\");");
		
		
		sprinter.println("if( fb->startstate[0] != '\\0' )");
		sprinter.indent();
		sprinter.println("printf(\"<ECState Name=\\\"%s\\\" />\\n\", fb->startstate);");
		sprinter.unindent();
		
		sprinter.println("printf(\"</Initialize>\\n\");");
		
		
		sprinter.unindent();
		sprinter.println("}");
		sprinter.println();
		*/
		
		
		
		/******** MAIN ********/
		sprinter.print("int main(int argc, char *argv[])");
		sprinter.print("{");
		sprinter.indent();
			// Socket
			//sprinter.print("int       list_s;                /*  listening socket          */");
			sprinter.print("int       conn_s;                /*  connection socket         */");
		    sprinter.print("const short int port = 61495;    /*  port number               */");
		    sprinter.print("struct    sockaddr_in servaddr;  /*  socket address structure  */");
		    sprinter.print("char      inbuffer[10240];      /*  character buffer          */");
		    sprinter.print("int insize = 0;");
		    // TEMP
		    sprinter.print("int tickCount = 0;");
		    
		    sprinter.print("// Declare and initialize variables");
		    sprinter.println("#ifdef _MSC_VER");
			sprinter.print("WSADATA wsaData = {0};");
			sprinter.println("#endif");
			
		    sprinter.print("int sResult = 0;");
		    sprinter.print("int flag = 0;");
		    
		    //sprinter.print("char outbuffer[10240]; // TODO: Malloc string as required");
		    sprinter.print("char* outbuffer = NULL;");
			//sprinter.print("int outsize = 0;");
			//sprinter.print("FILE *fp, *outtest;");
			sprinter.print("// Input:");
			sprinter.print("mxml_node_t *inxml = mxmlNewXML(\"1.0\");");
			sprinter.print("mxml_node_t *tree = NULL;");
			sprinter.print("mxml_node_t *node = NULL;");
			sprinter.print("");
			sprinter.print("// Output");
			sprinter.print("mxml_node_t *outxml = mxmlNewXML(\"1.0\");");
			sprinter.print("mxml_node_t *tick = mxmlNewElement(outxml, \"Tick\");");
			
			//printBlockInformation(fb);
			
			sprinter.print("// Declare Main FB instance (same as --run)");
			sprinter.print(fb.getCompiledType() + " _var;");
			sprinter.println("memset(&_var, 0, sizeof("+fb.getCompiledType()+"));");
			
			sprinter.print(fb.getCompiledType()+"init(&_var);");
			sprinter.print(fb.getCompiledType()+"_initXML(tick, &_var, \"root\");");
			//sprinter.print("printFunctionBlock(&"+fb.getName()+"fb);");
			
			//sprinter.print("// Temp file out");
			//sprinter.print("outtest = fopen(\"outtest.xml\", \"w\");");
			
			sprinter.println();
			sprinter.println("#ifdef _MSC_VER");
			sprinter.print("// Initialize Winsock");
			sprinter.print("sResult = WSAStartup(MAKEWORD(2, 2), &wsaData);");
			sprinter.print("if (sResult != 0) {");
			sprinter.print("    printf(\"WSAStartup failed: %d\\n\", sResult);");
			sprinter.print("    return 1;");
			sprinter.print("}");
			sprinter.println();
			sprinter.println("#endif");
			
			/*sprinter.print("// Listen socket");
			sprinter.print("if ( (list_s = socket(AF_INET, SOCK_STREAM, 0)) < 0 ) {");
			sprinter.print("	fprintf(stderr, \"Simulator: Error creating listening socket: %d\\n\", WSAGetLastError());");
			sprinter.print("	exit(EXIT_FAILURE);");
			sprinter.print("}");
			*/
			sprinter.print("// Client socket");
			sprinter.print("if ( (conn_s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0 ) {");
			//sprinter.print("	fprintf(stderr, \"Simulator: Error creating listening socket: %d\\n\", WSAGetLastError());");
			//sprinter.print("	exit(EXIT_FAILURE);");
			sprinter.print("	fprintf(stderr, \"Simulator: Error creating listening socket: %d\\n\", conn_s);");
			sprinter.print("	exit(conn_s);");
			sprinter.print("}");
			
			
			sprinter.print("//  Set all bytes in socket address structure to");
			sprinter.print("//  zero, and fill in the relevant data members");
			
			sprinter.print("memset(&servaddr, 0, sizeof(servaddr));");
			sprinter.print("servaddr.sin_family      = AF_INET;");
			sprinter.println("#ifdef _MSC_VER");
			sprinter.print("servaddr.sin_addr.s_addr = inet_addr(\"" + Options.getSimulIPaddr() + "\");");
			sprinter.print("#else");
			sprinter.print("inet_pton(AF_INET, \"" + Options.getSimulIPaddr() + "\", &servaddr.sin_addr.s_addr);");
			sprinter.println("#endif");
			
			sprinter.print("servaddr.sin_port        = htons(port);");
			sprinter.print("");
			sprinter.print("");
			sprinter.print("flag = 1;");
			sprinter.print("sResult = setsockopt(conn_s, IPPROTO_TCP, TCP_NODELAY, (char *) &flag, sizeof(int));");
			sprinter.print("if (sResult != 0) {");
			sprinter.print("	fprintf(stderr, \"Simulator: Error setting TCP_NODELAY: %d\\n\", sResult);");
			sprinter.print("	exit(sResult);");
			sprinter.print("}");
	
			/*sprinter.print("//  Bind our socket addresss to the ");
			sprinter.print("// listening socket, and call listen() ");
			sprinter.print("");
			sprinter.print("if ( bind(list_s, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0 ) {");
			sprinter.print("    fprintf(stderr, \"Simulator: Error calling bind(): %d\\n\", WSAGetLastError());");
			sprinter.print("    exit(EXIT_FAILURE);");
			sprinter.print("}");
			sprinter.print("");
			sprinter.print("if ( listen(list_s, SOMAXCONN ) < 0 ) {");
			sprinter.print("    fprintf(stderr, \"Simulator: Error calling listen()\\n\");");
			sprinter.print("    exit(EXIT_FAILURE);");
			sprinter.print("}");
			sprinter.print("    //  Wait for a connection, then accept() it");
			sprinter.print("    ");
			sprinter.print("    if ( (conn_s = accept(list_s, NULL, NULL) ) < 0 ) {");
			sprinter.print("        fprintf(stderr, \"Simulator: Error calling accept(): %d\\n\", WSAGetLastError());");
			sprinter.print("        exit(EXIT_FAILURE);");
			sprinter.print("    }");*/
			
			
			sprinter.print("// Connect to server.");
			sprinter.print("printf( \"Trying to connect to TimeMe...\\n\");");
			sprinter.print("while ( connect( conn_s, (struct sockaddr*) &servaddr, sizeof(servaddr)) != 0) {");
			sprinter.print("    #ifdef _MSC_VER");
			sprinter.print("    		Sleep(10);");
			sprinter.print("    #else");
			sprinter.print("            sleep(10);");
			sprinter.print("    #endif");
			//sprinter.print("    printf( \"Failed to connect: %d\\n\", WSAGetLastError());");
			sprinter.print("    #ifdef _MSC_VER");
			//sprinter.print("    WSACleanup();");
			sprinter.print("    #endif");
			//sprinter.print("    return;");
			sprinter.print("}");
			sprinter.print("printf( \"Connected to TimeMe\\n\");");
			
			
			sprinter.print("// Init TICK");
			sprinter.print(""+fb.getCompiledType()+"run(&_var);");
			sprinter.print("");
			sprinter.print("// Tell IDE");
			sprinter.print("    outbuffer = mxmlSaveAllocString(outxml, ");
			sprinter.print("	MXML_NO_CALLBACK); // whitespace_cb");
			
			sprinter.print("	if( outbuffer == NULL ){ // ");
			sprinter.print("        printf(\"Things are broke. mxmlSaveAllocString returned NULL\\n\"); ");
			sprinter.print("        scanf(\"%c\\n\", &inbuffer[0]);");
			sprinter.print("	}");
			
			sprinter.print("    // Send buffer over TCP");
			sprinter.print("    sResult = send( conn_s, outbuffer, strlen(outbuffer), 0 );");
			sprinter.print("	if (sResult < 0) {");
			sprinter.print("	    printf(\"send() failed with error: %d\\n\", sResult);");
			sprinter.println("#ifdef _MSC_VER");
			sprinter.print("		WSACleanup();");
			sprinter.print("		closesocket(conn_s);");
			sprinter.println("#else");
			sprinter.print("		close(conn_s);");
			sprinter.println("#endif");
			sprinter.print("		return 1;");
			sprinter.print("	}");
			sprinter.print("	printf(\"Sent: \\n\\n\\\"\\\"\\\"%s\\\"\\\"\\\"\\n\",outbuffer);");
			//sprinter.print("	printf(\"\\n%s\\n\", outbuffer);");
			sprinter.print("    fflush(stdout);");
			// NOTE: free breaks simulation on some people's computers
			// NOTE: TCP_NODELAY FIX works for _MSC_VER ONLY
			// TODO: Make it work for gcc as well :(
			sprinter.println("#ifdef _MSC_VER");
			sprinter.print("    free(outbuffer);");
			sprinter.println("#endif");
			sprinter.print("while(1){");
			
			sprinter.print("    insize = recv(conn_s, inbuffer, 10240, 0);");
			sprinter.print("    if( insize == 0 ){");
			sprinter.print("        printf(\"Connection ended\\n\");");
			sprinter.print("        break; // tcp connection end");
			sprinter.print("    }");
			sprinter.print("    if( insize < 0 ){");
			sprinter.print("    	printf(\"recv() failed with error: %d\\n\", insize);");
			sprinter.println("#ifdef _MSC_VER");
			sprinter.print("		WSACleanup();");
			sprinter.print("		closesocket(conn_s);");
			sprinter.println("#else");
			sprinter.print("		close(conn_s);");
			sprinter.println("#endif");
			sprinter.print("        return 1;");
			sprinter.print("    }");
			sprinter.print("	inbuffer[insize] = '\\0';");
			sprinter.print("	printf(\"Got: %d bytes: \\n\\n\\\"\\\"\\\"%s\\\"\\\"\\\"\\n\",insize, inbuffer);");
			//sprinter.print("    fp = fopen(\"inputtest.xml\", \"r\");");
			//sprinter.print("	if( fp == NULL )");
			//sprinter.print("		exit(-1);");
			sprinter.print("    clearChildren(inxml);");
			sprinter.print("	tree = mxmlLoadString(inxml, inbuffer, MXML_OPAQUE_CALLBACK ); // MXML_ELEMENT );");
			//sprinter.print("	tree = mxmlLoadFile(NULL, fp, MXML_OPAQUE_CALLBACK);");
			//sprinter.print("	fclose(fp);");
			sprinter.print("	");
			/*sprinter.print("	commands = mxmlFindElement(tree, tree, \"Commands\",");
			sprinter.print("						   NULL, NULL,");
			sprinter.print("						   MXML_DESCEND);");
			sprinter.print("	if( commands == NULL )");
			sprinter.print("	{");
			sprinter.print("		printf(\"No commands found :(\\n\");");
			sprinter.print("		continue;");
			sprinter.print("	}");
			sprinter.print("	node = commands->child;");*/
			
			sprinter.print("	if( tree == NULL || tree->child == NULL )");
			sprinter.print("	{");
			sprinter.print("		printf(\"No xml commands found :(\\n\");");
			sprinter.print("		continue;");
			sprinter.print("	}");
			
			sprinter.print("	node = tree->child;");
			sprinter.print("	while( 1 )");
			sprinter.print("	{");
			sprinter.print("		if( node->value.opaque != NULL )");
			sprinter.print("		{");
			sprinter.print("			printf(\"%s\\n\", node->value.opaque);");
			if (FBtoStrl.opts.altSim == true) {
				sprinter.print("			if( strcasecmp(node->value.opaque,\"Tick\") == 0)");
			}else{
				sprinter.print("			if( stricmp(node->value.opaque,\"Tick\") == 0)");
			}
			sprinter.print("			{");

			// TEMP
		    sprinter.print("                printf(\"Handling tick #%d\\n\", ++tickCount);");
		    
			sprinter.print("				");
			sprinter.print("				handleTickCommand(tree, node, &_var);");
			sprinter.print("				"+fb.getCompiledType()+"run(&_var);");
			sprinter.print("				");
			sprinter.print("				// Respond!!!");
			sprinter.print("				");
			sprinter.print("				outbuffer = mxmlSaveAllocString(outxml, ");
			sprinter.print("					MXML_NO_CALLBACK); // whitespace_cb");
			//sprinter.print("                mxmlSaveFile(outxml, outtest, whitespace_cb);");
			sprinter.print("				if( outbuffer != NULL ){");
			sprinter.print("                     printf(\"Output XML: \\n\");");
			sprinter.print("                     printf(\"\\n%s\\n\", outbuffer);");
			sprinter.print("                     fflush(stdout);");
			sprinter.print("				     // Send buffer over TCP");
			sprinter.print("                     sResult = send( conn_s, outbuffer, strlen(outbuffer), 0 );");
			// NOTE: free breaks simulation on some people's computers
			// NOTE: TCP_NODELAY FIX works for _MSC_VER ONLY
			// TODO: Make it work for gcc as well :(
			sprinter.println("#ifdef _MSC_VER");
			sprinter.println("                     free(outbuffer);");
			sprinter.println("#endif");
			sprinter.print("		 			 if (sResult < 0) {");
			sprinter.print("					    printf(\"send() failed with error: %d\\n\", sResult);");
			sprinter.println("#ifdef _MSC_VER");
			sprinter.print("		WSACleanup();");
			sprinter.print("		closesocket(conn_s);");
			sprinter.println("#else");
			sprinter.print("		close(conn_s);");
			sprinter.println("#endif");
			sprinter.print("					    return 1;");
			sprinter.print("					 }");
			sprinter.print("				}");
			sprinter.print("				");
			if( fb.inputEvents != null )
			{
				sprinter.print("				//Clear input events");
				sprinter.print("				_var._input.events = 0;");
			}
			sprinter.print("			}");
			if (FBtoStrl.opts.altSim == true) {
				sprinter.print("			else if( strcasecmp(node->value.opaque,\"Stop\") == 0)");
			}else{
				sprinter.print("			else if( stricmp(node->value.opaque,\"Stop\") == 0)");
			}
			sprinter.print("			{");
			sprinter.print("				printf(\"Stop command received. Exiting.\\n\");");
			sprinter.print("				exit(0);");
			sprinter.print("			}");
			sprinter.print("		}");
			sprinter.print("		if( node->next != NULL )");
			// TEMP
		    sprinter.print("        { "); //       printf(\"node %p, ->next %p != NULL\\n\", node, node->next);");
			sprinter.print("			node = node->next;");
			sprinter.print("		}else");
			sprinter.print("			break;");
			sprinter.print("	}");
			
			// TEMP
		    sprinter.print("        printf(\"Handle RECV xml DONE @ end of tick %d\\n\", tickCount);");
		    
			sprinter.print("	");
			sprinter.print("}");
			sprinter.println("#ifdef _MSC_VER");
			sprinter.println("WSACleanup();");
			sprinter.println("closesocket(conn_s);");
			sprinter.println("#else");
			sprinter.println("close(conn_s);");
			sprinter.println("#endif");
			sprinter.print("return 1;");
		sprinter.unindent();
		sprinter.print("}", 1);
		sprinter.println();
		
		sprinter.println("void handleTickCommand(mxml_node_t* tree, mxml_node_t* tickNode, "+fb.getCompiledType()+"* me)");
		sprinter.println("{");
		sprinter.indent();
			sprinter.println("mxml_node_t *event, *var;");
			sprinter.println("const char* nameAttr;");
			sprinter.println("const char* valueAttr;");
			sprinter.println();
			sprinter.println("printf(\"Handle tick\\n\");");
			sprinter.println("// Get input events");
			sprinter.println("event = mxmlFindElement(tickNode, tree, \"Event\",");
		    sprinter.println("                       NULL, NULL,");
		    sprinter.println("                       MXML_DESCEND);");
			sprinter.println("while( event != NULL )");
			sprinter.println("{");
			sprinter.indent();
				sprinter.println("if(  strcmp(event->value.opaque, \"Event\") == 0  )");
				sprinter.println("{");
				sprinter.indent();
					sprinter.println("nameAttr = mxmlElementGetAttr ( event, \"Name\" );");
					sprinter.println("valueAttr = mxmlElementGetAttr ( event, \"Value\" );");
					sprinter.println("");		
					sprinter.println("if( nameAttr != NULL && valueAttr != NULL)");
					sprinter.println("{");
					sprinter.indent();
						if (FBtoStrl.opts.altSim == true) {
							sprinter.println("if( strcasecmp(valueAttr, \"Present\") == 0 )");
						}else{	
							sprinter.println("if( stricmp(valueAttr, \"Present\") == 0 )");
						}
						sprinter.println("{");
						sprinter.indent();
							sprinter.println("printf(\"Event Present Name=%s\\n\", nameAttr);");
						
							if( fb.inputEvents != null )
							for(int e = 0; e < fb.inputEvents.length; e++)
							{
								if( e == 0 ) {
									if (FBtoStrl.opts.altSim == true) {
										sprinter.println("if( strcasecmp(nameAttr, \""+fb.inputEvents[e].getName()+"\") == 0 )");
									}else{
										sprinter.println("if( stricmp(nameAttr, \""+fb.inputEvents[e].getName()+"\") == 0 )");
									}
								} else {
									if (FBtoStrl.opts.altSim == true) {
										sprinter.println("else if( strcasecmp(nameAttr, \""+fb.inputEvents[e].getName()+"\") == 0 )");	
									}else{
										sprinter.println("else if( stricmp(nameAttr, \""+fb.inputEvents[e].getName()+"\") == 0 )");
									}
								}
								sprinter.println("{");
								sprinter.indent();
									sprinter.println("me->_input.event."+fb.inputEvents[e].getName()+" = 1;");
								sprinter.unindent();
								sprinter.println("}");
							}
							
						sprinter.unindent();
						sprinter.println("}");
						sprinter.println("else");
						sprinter.println("{");
						sprinter.indent();
							sprinter.println("printf(\"Event Absent Name=%s\\n\", nameAttr); ");
							sprinter.println("// skip / who cares");
						sprinter.unindent();
						sprinter.println("}");
					sprinter.unindent();
					sprinter.println("}");
				sprinter.unindent();
				sprinter.println("}");
				sprinter.println("event = event->next;");
			sprinter.unindent();
			sprinter.println("}");
			sprinter.println("");
			sprinter.println("var = mxmlFindElement(tickNode, tree, \"Var\",");
		    sprinter.println("                       NULL, NULL,");
		    sprinter.println("                       MXML_DESCEND);");
			sprinter.println("// Get input data");
			sprinter.println("while( var != NULL )");
			sprinter.println("{");
			sprinter.indent();
				sprinter.println("if( strcmp(var->value.opaque, \"Var\") == 0 )");
				sprinter.println("{");
				sprinter.indent();
					sprinter.println("nameAttr = mxmlElementGetAttr ( var, \"Name\" );");
					sprinter.println("valueAttr = mxmlElementGetAttr ( var, \"Value\" );");
					sprinter.println("");
					sprinter.println("if( nameAttr != NULL && valueAttr != NULL)");
					sprinter.println("{");
					sprinter.indent();
						sprinter.println("// Set var value");
						sprinter.println("printf(\"Var Name=%s Value=%s\\n\", nameAttr, valueAttr);");
						if( fb.inputData != null )
						for(int v = 0; v < fb.inputData.length; v++)
						{
							if( v == 0 ) {
								if (FBtoStrl.opts.altSim == true) {
									sprinter.println("if( strcasecmp(nameAttr, \""+fb.inputData[v].getName()+"\") == 0 )");
								}else{
									sprinter.println("if( stricmp(nameAttr, \""+fb.inputData[v].getName()+"\") == 0 )");
								}
							}else{
								if (FBtoStrl.opts.altSim == true) {
									sprinter.println("else if( strcasecmp(nameAttr, \""+fb.inputData[v].getName()+"\") == 0 )");
								}else{
									sprinter.println("else if( stricmp(nameAttr, \""+fb.inputData[v].getName()+"\") == 0 )");
								}
							}
							sprinter.println("{");
							sprinter.indent();
								sprinter.print("stringToVoid(valueAttr, IEC_"+fb.inputData[v].getType()+", "+fb.inputData[v].getArrayLength()+", ");
								if( fb.inputData[v].getType().contains("STRING") )
									sprinter.println("me->_"+fb.inputData[v].getName()+");"); // Strings don't want pointer de-ref
								else
									sprinter.println("&me->_"+fb.inputData[v].getName()+");");
							sprinter.unindent();
							sprinter.println("}");
						}
					sprinter.unindent();
					sprinter.println("}");
				sprinter.unindent();
				sprinter.println("}");
				sprinter.println("var = var->next;");
			sprinter.unindent();
			sprinter.println("}");
		
		sprinter.unindent();
		sprinter.println("}");
		sprinter.println();
		
		copyResourceFiles(); // copy other files used
	}


	/**
	 * Finish top level sim config files... and close them
	 * @throws IOException
	 */
	public static void closeSimFiles() throws IOException
	{
		//if( FBtoStrl.opts.isSimul() )
		//	processBlocks();
		
		shprinter.print("#endif // " + simDef, 1);
		shprinter.close();
		sprinter.close();
	}

	/**
	 * Obsoleted function
	 * @throws IOException
	 */
	/*private static void processBlocks() throws IOException
	{
		// Add interfaces to a table
		Enumeration<FunctionBlock> fbs = blocks.elements();
		while(fbs.hasMoreElements())
		{
			FunctionBlock b = fbs.nextElement();
			//printBlockInformation(b);
		}
		
		sprinter.println();
		
		/*
		// add instances to lookup table
		
		for(String i : instances.keySet())
		{
			// print
			//instances.get(i);
			String safename = i.replaceAll("\\.", "_");
			sprinter.println("FunctionBlock* " + safename + " = &" + instances.get(i)+"fb;");
		}
		
		sprinter.println();
		
		// Add printFunctionBlockByName function 
		sprinter.print("void printFunctionBlockByName(char* instancename)");
		sprinter.print("{");
		sprinter.indent();
			for(String i : instances.keySet())
			{
				// print
				//instances.get(i);
				String safename = i.replaceAll("\\.", "_");
				sprinter.println("if( strcmp(instancename, \"" + i + "\") == 0 )");
				sprinter.indent();
				sprinter.println("printFunctionBlock(" + safename + ");");
				sprinter.unindent();
			}
		sprinter.unindent();
		sprinter.print("}", 1);
		sprinter.println();
		*/
		/*
		// Add printFunctionBlockStatuses function
		
		
		sprinter.print("void printFunctionBlockStatuses("+FBtoStrl.topLevelFile+"* root, char* instancename)");
		sprinter.print("{");
		sprinter.indent();
			sprinter.println("printf(\"<Tick>\\n\");");
			for(String i : instances.keySet())
			{
				// print
				//instances.get(i);
				String statusesvar = i.replaceAll("\\.", "->");
				if( i.equals("root") )
					statusesvar += "->_statuses";
				else
					statusesvar += "._statuses";
				sprinter.println("if( strcmp(instancename, \"" + i + "\") == 0 )");
				sprinter.indent();
				sprinter.println("printLinkedList(&" + statusesvar + ");");
				sprinter.unindent();
			}
			sprinter.println("printf(\"</Tick>\\n\");");
		sprinter.unindent();
		sprinter.print("}", 1);
		sprinter.println();
		*/
	//}
	
	/**
	 * Obsoleted function
	 * @throws IOException
	 */
/*	private static void printBlockInformation(FunctionBlock b) throws IOException {
		//shprinter.println("FunctionBlock " + b.getName()+"fb;");
		
		sprinter.println("FunctionBlock " + b.getCompiledType()+"fb = {");
		sprinter.indent();
		
			// Input Events
			if( b.inputEvents != null )
				sprinter.println(b.inputEvents.length+",{");
			else
				sprinter.println("0,{");
			sprinter.indent();
			if( b.inputEvents != null )	
				for(int e = 0; e < b.inputEvents.length; e++)
				{
					if( e != 0 ) 
						sprinter.printNoIndent(","); 
					
					sprinter.printNoIndent("{\""+b.inputEvents[e].getName()+"\"}");
				}
			else
			{
				// Just init one empty one
				sprinter.printNoIndent("{\"\"}");
			}
			sprinter.println();
			sprinter.unindent();
			sprinter.println("},");
			
			// Output Events
			if( b.outputEvents != null )
				sprinter.println(b.outputEvents.length+",{");
			else
				sprinter.println("0,{");
			sprinter.indent();
			if( b.outputEvents != null )	
				for(int e = 0; e < b.outputEvents.length; e++)
				{
					if( e != 0 ) sprinter.printNoIndent(",");
					sprinter.printNoIndent("{\""+b.outputEvents[e].getName()+"\"}");
				}
			else
			{
				// Just init one empty one
				sprinter.printNoIndent("{\"\"}");
			}
			
			sprinter.println();
			sprinter.unindent();
			sprinter.println("},");
			
			
			// Input Data
			if( b.inputData != null )
				sprinter.println(b.inputData.length+",{");
			else
				sprinter.println("0,{");
			sprinter.indent();
			
			if( b.inputData != null )
				for(int v = 0; v < b.inputData.length; v++)
				{
					String initial = b.inputData[v].getInitial();
					if( initial == null ) initial = "";
					
					if( v != 0 ) sprinter.printNoIndent(",");
					

					sprinter.printNoIndent("{\""+b.inputData[v].getName()+"\",\""+b.inputData[v].getType()+"\",\""+b.inputData[v].getArraySize()+"\",\""+initial+"\"}");
				}
			else
			{
				// Just init one empty one
				sprinter.printNoIndent("{\"\",\"\",\"\"}");
			}
			
			sprinter.println();
			sprinter.unindent();
			sprinter.println("},");
			
			
			// Output Data
			if( b.outputData != null )
				sprinter.println(b.outputData.length+",{");
			else
				sprinter.println("0,{");
			
			sprinter.indent();
			if( b.outputData != null )
				for(int v = 0; v < b.outputData.length; v++)
				{
					String initial = b.outputData[v].getInitial();
					if( initial == null ) initial = "";
					
					if( v != 0 ) sprinter.printNoIndent(","); 
					
					sprinter.printNoIndent("{\""+b.outputData[v].getName()+"\",\""+b.outputData[v].getType()+"\",\""+b.outputData[v].getArraySize()+"\",\""+initial+"\"}");
				}
			else
			{
				// Just init one empty one
				sprinter.printNoIndent("{\"\",\"\",\"\"}");
			}
			
			sprinter.println();
			sprinter.unindent();
			sprinter.println("},");
			
			// Start state
			if( b.getBasicFB() != null)
				sprinter.println("\""+b.getBasicFB().getECCRoot().name+"\"");
			else
				sprinter.println("'\\0'");
			
		
		sprinter.unindent();
		sprinter.println("};");
		
		
	
		
	}
*/

	/**
	 * Add an FB to the list of block types we are simulating
	 * - Used in top level config file later
	 * @param fb
	 * @throws IOException
	 */
	public static void addInterface(FunctionBlock fb) throws IOException 
	{
		blocks.put(fb.getCompiledType(), fb);		
	}
	
	/** 
	 * Add an instance of a FB type we are simulating
	 * - Used in top level config file later
	 * @param fqInstanceName
	 * @param type
	 */
	public static void addInstance(String fqInstanceName, String type)
	{
		instances.put(fqInstanceName, type);
	}
	
	/**
	 * Append simulation functions to a block's .c file
	 * @param printer
	 * @param fb
	 * @throws IOException
	 */
	public static void addSimFunctions(CodePrinter printer, FunctionBlock fb) throws IOException
	{
		addXML(printer,fb);
		//addPrintStatuses(printer, fb);
	}
	
	/**
	 * Append  <FBName>_initXML and <FBName>_runXML functions to c printer
	 * initXML creates xml nodes as children of me->_simdata
	 * runXML updates attributes of the created nodes ^ 
	 * @param printer
	 * @param fb
	 * @throws IOException
	 */
	public static void addXML(CodePrinter printer, FunctionBlock fb) throws IOException
	{
		
		if( !fb.isPretC() )
		{
			printer.println("void "+fb.getCompiledType()+"_initXML(mxml_node_t* node, "+fb.getCompiledType()+"* me, char* instancename)");
			printer.println("{");
			printer.indent();
			//printer.println("mxml_node_t* childnode; // used as a temp node");
			printer.println("// Add to tree");
			printer.println("mxmlAdd(node, MXML_ADD_AFTER, NULL, me->_simdata);");
			printer.println("// Add constanty things");
			printer.println("mxmlElementSetAttrf(me->_simdata, \"Name\", \"%s\", instancename);");
			printer.println("mxmlElementSetAttr(me->_simdata, \"Type\", \""+fb.getCompiledType()+"\");");
			
			printer.println("me->_simevents = mxmlNewElement(me->_simdata,\"Events\");");
			printer.println("me->_simvars = mxmlNewElement(me->_simdata,\"Vars\");");
			
			if( fb.getBasicFB() != null )
			{
				
				printer.println("me->_simstates = mxmlNewElement(me->_simdata,\"ECStates\");");
				printer.println("me->_simstate = mxmlNewElement(me->_simstates,\"ECState\");");
				// if( fb.getBasicFB() instanceof BasicHCECCFB )
					// These nodes are dynamically created and removed at runtime, because sometimes HCECC will not be in ANY state
				printer.println("me->_simtransitions = mxmlNewElement(me->_simdata,\"ECTransitions\");");
				
			}
			else if ( fb.getCompositeFB() != null )
			{
				// Create instances node.. add THINGS
				printer.println("me->_siminstances = mxmlNewElement(me->_simdata,\"Instances\");");
				Composite comp = fb.getCompositeFB();
				for( Instance run : comp.runs)
				{
					if( blocks.containsKey(run.getType()) )
						printer.println(run.getType()+"_initXML(me->_siminstances, &me->"+run.name+", \""+run.name+"\");");
				}
				
				printer.println("me->_simconnections = mxmlNewElement(me->_simdata,\"Connections\");");
			}
			printer.unindent();
			printer.print("}",1);
		}
		
		printer.println("void "+fb.getCompiledType()+"_runXML("+fb.getCompiledType()+"* me)");
		printer.println("{");
		printer.println("mxml_node_t* childnode; // used as a temp node");
		
		if( fb.inputEvents != null) // Basic FBs clear incoming events @ end of tick anyway
			for(Event e : fb.inputEvents)
			{
				printer.println("childnode = mxmlNewElement(me->_simevents,\"Event\");");
				printer.println("mxmlElementSetAttr(childnode, \"Name\", \""+e.getName()+"\");");
				printer.println("mxmlElementSetAttr(childnode, \"Scope\", \"Input\");");
				printer.println("mxmlElementSetAttr(childnode, \"Type\", \"EVENT\");");
				printer.println("if(  me->_input.event."+e.getName()+" )");
				printer.println("    mxmlElementSetAttr(childnode, \"Value\", \"Present\");");
				printer.println("else");
				printer.println("    mxmlElementSetAttr(childnode, \"Value\", \"Absent\");");
				
			}
		if( fb.outputEvents != null)
			for(Event e : fb.outputEvents)
			{
				printer.println("childnode = mxmlNewElement(me->_simevents,\"Event\");");
				printer.println("mxmlElementSetAttr(childnode, \"Name\", \""+e.getName()+"\");");
				printer.println("mxmlElementSetAttr(childnode, \"Scope\", \"Output\");");
				printer.println("mxmlElementSetAttr(childnode, \"Type\", \"EVENT\");");
				printer.println("if(  me->_output.event."+e.getName()+" )");
				printer.println("    mxmlElementSetAttr(childnode, \"Value\", \"Present\");");
				printer.println("else");
				printer.println("    mxmlElementSetAttr(childnode, \"Value\", \"Absent\");");
			}
	
		if( fb.inputData != null)
			for(VarType v : fb.inputData)
			{
				//<Var Name=�InVar1� Value=�InVal1� Scope=�Internal�/>
				printer.println("childnode = mxmlNewElement(me->_simvars,\"Var\");");
				printer.println("mxmlElementSetAttr(childnode, \"Name\", \""+v.getName()+"\");");
				printer.println("mxmlElementSetAttr(childnode, \"Scope\", \"Input\");");
				printer.println("mxmlElementSetAttr(childnode, \"Type\", \""+v.getType()+"\");");
				printer.println("mxmlElementSetAttrf(childnode, \"Value\", \""+getCPrintThing(v.getType(), v.getArrayLength())+"\", "+getCVar(v.getName(), v.getArrayLength(), false)+");");
				
			}
		if( fb.outputData != null)
			for(VarType v : fb.outputData)
			{
				printer.println("childnode = mxmlNewElement(me->_simvars,\"Var\");");
				printer.println("mxmlElementSetAttr(childnode, \"Name\", \""+v.getName()+"\");");
				printer.println("mxmlElementSetAttr(childnode, \"Scope\", \"Output\");");
				printer.println("mxmlElementSetAttr(childnode, \"Type\", \""+v.getType()+"\");");
				printer.println("mxmlElementSetAttrf(childnode, \"Value\", \""+getCPrintThing(v.getType(), v.getArrayLength())+"\", "+getCVar(v.getName(), v.getArrayLength(), false)+");");
			}
		
		if( fb.getBasicFB() != null )
		{
			// Internal vars
			if( fb.getBasicFB().internalVars != null)
				for(VarDeclaration v : fb.getBasicFB().internalVars)
				{
					printer.println("childnode = mxmlNewElement(me->_simvars,\"Var\");");
					printer.println("mxmlElementSetAttr(childnode, \"Name\", \""+v.getName()+"\");");
					printer.println("mxmlElementSetAttr(childnode, \"Scope\", \"Internal\");");
					printer.println("mxmlElementSetAttr(childnode, \"Type\", \""+v.getType()+"\");");
					printer.println("mxmlElementSetAttrf(childnode, \"Value\", \""+getCPrintThing(v.getType(), v.getArrayLength())+"\", "+getCVar(v.getName(), v.getArrayLength(), true)+");");
				}
			
			// State
			printer.println("//mxmlElementSetAttrf(me->_simstate, \"Name\", \"%s\", me->_statename); // set in run function");
			// Set at runtime?
		}
		else if ( fb.getCompositeFB() != null )
		{
			// Connections printed at runtime
			
			
			/*// Create instances node.. add THINGS
			Composite comp = fb.getCompositeFB();
			for( Instance run : comp.runs)
			{
				if( blocks.containsKey(run.type) )
					printer.println(run.type+"_runXML(&me->"+run.name+");");
			}*/
			// Each nested block runXML's itself
		}
		
	
		
		printer.unindent();
		printer.print("}",1);
		
		
	}
	
	/**
	 * From IEC 61131 type, return the C string format code to printf it
	 * @param t - IEC 61131 type
	 * @param arrayLen - Length of array of type t
	 * @return String to printf the IEC 61131 type
	 */
	private static String getCPrintThing(String t, int arrayLen) {
		if( arrayLen <= 1 )
		{
			if( t.contains("LINT") )
				return "%lld";
			if( t.contains("DINT") )
				return "%d";
			if( t.contains("INT") )
				return "%d";
			if( t.contains("STRING") )
				return "%s";
			if( t.contains("REAL") )
				return "%f";
			if( t.equalsIgnoreCase("BOOL") )
				return "%01x";
			if( t.equalsIgnoreCase("BYTE") )
				return "%01x";
			if( t.equalsIgnoreCase("CHAR") )
				return "%c";
			return "%02x";
		}
		else
		{
			String elemThing = getCPrintThing(t,1);
			String cPrintThing = "[";
			cPrintThing += elemThing;
			
			for(int i = 1; i < arrayLen; i++){
				cPrintThing += ","+elemThing;
			}
				
			cPrintThing += "]";
			return cPrintThing;
		}
		
	}
	
	
	/**
	 * Get the variable name used in C code for the block's variable 'varname'
	 * @param varName - Name of Interface/Local var
	 * @param arrayLen
	 * @param local
	 * @return String of C variable, or comma seperated C vars
	 */
	private static String getCVar(String varName, int arrayLen, boolean local)
	{
		String cVar = "me->";
		if( !local ) cVar += "_";
		cVar += varName;
		if( arrayLen > 1 )
		{
			String allVars = cVar+"[0]";
			for(int i = 1; i < arrayLen; i++){
				allVars += ","+cVar+"["+i+"]";
			}
			return allVars;
		}
		return cVar;
		
	}


	/**
	 * Inits the QT simulator for a particular FunctionBlock type
	 * @param fb
	 * @throws IOException
	 */
	public static void setQTInterface(FunctionBlock fb) throws IOException {
		if( shprinter == null ) return;
		
		String fbName = fb.getCompiledType();
		Event[] inputEvents = fb.inputEvents;
		Event[] outputEvents = fb.outputEvents;
		VarType[] inputData = fb.inputData;
		VarType[] outputData = fb.outputData;
		
		// BEWARE!!! Order of statements for "shprinter" is very sensitive 
		// due to Qt's object tree hierarchy. This has the effect of 
		// determining the order of destructor calls, which is particularly 
		// important here, since all objects are created on the stack.
		shprinter.print("class OCheckBox : public QCheckBox");
		shprinter.print("{");
		shprinter.print("    Q_OBJECT");
		shprinter.print("private:");
		shprinter.print("    bool checked;", 1);
		shprinter.print("public:");
		shprinter.print("    OCheckBox(QWidget* parent = 0);", 1);
		shprinter.print("public slots:");
		shprinter.print("    void setChecked(bool c);");
		shprinter.print("    void fixClicked(void);");
		shprinter.print("};", 1);
		shprinter.print("class FBGui_ : public QWidget");
		shprinter.print("{");
		shprinter.print("    Q_OBJECT");
		shprinter.print("private:");
		shprinter.indent();
		sprinter.print("FBGui_::FBGui_(QWidget* parent) : QWidget(parent),");
		sprinter.print("                                  reset(tr(\"&Reset\"), this),");
		sprinter.print("                                  tick(tr(\"Tic&k\"), this),");
		sprinter.print("                                  close(tr(\"&Close\"), this),");
		sprinter.print("                                  iBox(tr(\"Inputs\"), this),");
		sprinter.print("                                  oBox(tr(\"Outputs\"), this)");
		sprinter.print("{");
		sprinter.indent();
		sprinter.print("initSimulator();");
		shprinter.print(fbName + "Reg sysInterface;");
		shprinter.print(fbName + " var;");
		sprinter.print("setWindowTitle(tr(\"" + fbName + "\"));", 1);
		shprinter.print("bool firstTime;", 1);
		shprinter.print("QVBoxLayout layout;", 1);
		shprinter.print("QHBoxLayout buttonBox;");			
		shprinter.print("QPushButton reset;");
		shprinter.print("QPushButton tick;");
		shprinter.print("QPushButton close;", 1);
		shprinter.print("QHBoxLayout portBox;", 1);
		shprinter.print("QGroupBox iBox;", 1);
		shprinter.print("QVBoxLayout iLayout;");			
		sprinter.print("connect(&reset, SIGNAL(clicked()), this, SLOT(onReset()));");
		sprinter.print("connect(&tick, SIGNAL(clicked()), this, SLOT(onTick()));");
		sprinter.print("connect(&close, SIGNAL(clicked()), this, SLOT(close()));");
		sprinter.print("buttonBox.addWidget(&reset);");
		sprinter.print("buttonBox.addWidget(&tick);");
		sprinter.print("buttonBox.addStretch();");
		sprinter.print("buttonBox.addWidget(&close);", 1);			
		
		if (inputEvents != null) {
			String index = Integer.toString(inputEvents.length);
			shprinter.print("QCheckBox ie[" + index + "];");
			for (int i = 0; i < inputEvents.length; i++) {
				sprinter.print("ie[" + Integer.toString(i) + 
						       "].setText(tr(\"" + inputEvents[i].getName() +
						       "\"));");
			}
			sprinter.print("for (int i = 0; i < " + index + "; i++) {");
			sprinter.print("    ie[i].setParent(this);");
			sprinter.print("    iLayout.addWidget(&ie[i]);");
			sprinter.print("}");
		}
		shprinter.print("QGridLayout iGrid;");
		if (inputData != null) {
			String index = Integer.toString(inputData.length);
			shprinter.print("QLabel idLabel[" + index + "];");
			shprinter.print("QLineEdit idText[" + index + "];");
			for (int i = 0; i < inputData.length; i++) {
				sprinter.print("idLabel[" + Integer.toString(i) + "].setText(tr(\"" + 
						       inputData[i].getName() + "\"));"); 
			}
			sprinter.print("for (int i = 0; i < " + index + "; i++) {");
			sprinter.print("    idLabel[i].setParent(this);");
			sprinter.print("    iGrid.addWidget(&idLabel[i], i, 0);");
			sprinter.print("    iGrid.addWidget(&idText[i], i, 1);");
			sprinter.print("}");
		}
		shprinter.print("QGroupBox oBox;");
		shprinter.print("QVBoxLayout oLayout;");
		if (outputEvents != null) {
			String index = Integer.toString(outputEvents.length);
			shprinter.print("OCheckBox oe[" + index + "];");
			for (int i = 0; i < outputEvents.length; i++) {
				sprinter.print("oe[" + Integer.toString(i) + 
						       "].setText(tr(\"" + outputEvents[i].getName() +
						       "\"));");
			}
			sprinter.print("for (int i = 0; i < " + index + "; i++) {");
			sprinter.print("    oe[i].setParent(this);");
			sprinter.print("    oLayout.addWidget(&oe[i]);");
			sprinter.print("}");
		}
		shprinter.print("QGridLayout oGrid;");
		if (outputData != null) {
			String index = Integer.toString(outputData.length);
			shprinter.print("QLabel odLabel[" + index + "];");
			shprinter.print("QLineEdit odText[" + index + "];");
			for (int i = 0; i < outputData.length; i++) {
				sprinter.print("odLabel[" + Integer.toString(i) + "].setText(tr(\"" + 
						       outputData[i].getName() + "\"));"); 
			}
			sprinter.print("for (int i = 0; i < " + index + "; i++) {");
			sprinter.print("    odLabel[i].setParent(this);");
			sprinter.print("    odText[i].setReadOnly(true);");
			sprinter.print("    oGrid.addWidget(&odLabel[i], i, 0);");
			sprinter.print("    oGrid.addWidget(&odText[i], i, 1);");
			sprinter.print("}");
		}
		sprinter.print("iLayout.addLayout(&iGrid);");
		sprinter.print("iLayout.addStretch();");
		sprinter.print("iBox.setLayout(&iLayout);", 1);
		sprinter.print("oLayout.addLayout(&oGrid);");
		sprinter.print("oLayout.addStretch();");
		sprinter.print("oBox.setLayout(&oLayout);", 1);
		sprinter.print("portBox.addWidget(&iBox);");
		sprinter.print("portBox.addWidget(&oBox);");
		sprinter.print("layout.addLayout(&buttonBox);");
		sprinter.print("layout.addLayout(&portBox);");
		sprinter.print("layout.addStretch();");
		sprinter.print("setLayout(&layout);");
		sprinter.unindent();
		sprinter.print("}", 1);
		shprinter.unindent();
		shprinter.print("public:");
		shprinter.print("    FBGui_(QWidget *parent = 0);");
		shprinter.print("    virtual ~FBGui_() {};", 1);
		shprinter.print("private:");
		shprinter.print("    void initSimulator(void);", 1);
		shprinter.print("private slots:");
		shprinter.print("    void onReset(void);");
		shprinter.print("    void onTick(void);");
		shprinter.print("};", 1);
		
		sprinter.print("void FBGui_::initSimulator(void)");
		sprinter.print("{");
		sprinter.print("    memset(&sysInterface, 0, sizeof(" + fbName + "Reg));");
		sprinter.print("    " + fbName + "init(&var);");
		sprinter.print("    firstTime = true;");
		sprinter.print("}", 1);
		sprinter.print("void FBGui_::onReset(void)");
		sprinter.print("{");
		sprinter.indent();
		sprinter.print("initSimulator();");
		if (inputEvents != null) {
			sprinter.print("for (int i = 0; i < " + 
					       Integer.toString(inputEvents.length) + "; i++)");
			sprinter.print("    ie[i].setChecked(false);");
		}
		if (inputData != null) {
			sprinter.print("for (int i = 0; i < " + 
					       Integer.toString(inputData.length) + "; i++)");
			sprinter.print("    idText[i].clear();");
		}
		if (outputEvents != null) {
			sprinter.print("for (int i = 0; i < " + 
			               Integer.toString(outputEvents.length) + "; i++)");
			sprinter.print("    oe[i].setChecked(false);");
		}
		if (outputData != null) {
			sprinter.print("for (int i = 0; i < " + 
		                   Integer.toString(outputData.length) + "; i++)");
			sprinter.print("    odText[i].clear();");
		}
		sprinter.unindent();
		sprinter.print("}", 1);
		
		sprinter.print("void FBGui_::onTick(void)");
		sprinter.print("{");
		sprinter.indent();
		sprinter.print("if (!firstTime) {");
		sprinter.print("    var._input = sysInterface._input;");
		if (inputData != null) {			
			for (int i = 0; i < inputData.length; i++) {					
				boolean array = false;
				int size = 1;
				String arraySize = inputData[i].getArraySize();
				if (!arraySize.isEmpty()) {
					array = true;
					size = Integer.parseInt(arraySize);
				}
				for (int j = 0; j < size; j++) {
					String index = CGenerator.getArrayIndex(array, j);
					String name = inputData[i].getName();
					String type = inputData[i].getType();
					if (type.equalsIgnoreCase("STRING") || type.equalsIgnoreCase("WSTRING")) {
						sprinter.print("    strcpy(var._" + name + index + 
								", sysInterface._" + name + index + ");");
					}
					else {
						sprinter.print("    var._" + name + index + 
								" = sysInterface._" + name + index + ";");	
					}
				}
			}
		}
		sprinter.print("}");
		
		if (inputEvents != null) {
			for (int i = 0; i < inputEvents.length; i++) {
				sprinter.print("sysInterface._input.event." + inputEvents[i].getName() + 
						       " = ie[" + Integer.toString(i) + "].isChecked();");
			}
		}
		if (inputData != null) {
			sprinter.print("const char* c;");
			for (int i = 0; i < inputData.length; i++) {					
				boolean array = false;
				int size = 1;
				String arraySize = inputData[i].getArraySize();
				if (!arraySize.isEmpty()) {
					array = true;
					size = Integer.parseInt(arraySize);
				}
				for (int j = 0; j < size; j++) {
					String index = CGenerator.getArrayIndex(array, j);
					sprinter.print("c = idText[" + Integer.toString(i) + 
				                   "].text().trimmed().toAscii().constData();");
					String type = inputData[i].getType();
					if (type.equalsIgnoreCase("STRING") || type.equalsIgnoreCase("WSTRING")) {
						sprinter.print("strcpy(sysInterface._" + 
								inputData[i].getName() + index + ", " + 
								CGenerator.getIConversionFunc(inputData[i].getType()) + ");");
					}
					else {
						sprinter.print("sysInterface._" + inputData[i].getName() + index + 
								" = " + CGenerator.getIConversionFunc(inputData[i].getType()));
					}
				}
			}
		}
		sprinter.print(fbName + "run(&var);", 1);
		sprinter.print("if (!firstTime) {");
		sprinter.indent();
		
		if (outputEvents != null) {
			for (int i = 0; i < outputEvents.length; i++) {
				sprinter.print("oe[" + Integer.toString(i) + 
						       "].setChecked(var._output.event." + 
						       outputEvents[i].getName() + ");");
			}
		}
		if (outputData != null) {
			for (int i = 0; i < outputData.length; i++) {
				String var = "var._" + outputData[i].getName();
				String text = "odText[" + Integer.toString(i) + "].setText";
				sprinter.print(CGenerator.getOConversionFunc(outputData[i].getType(), var, text)); 
			}
		}
		
		sprinter.unindent();
		sprinter.print("}");
		sprinter.print("firstTime = false;");
		sprinter.unindent();
		sprinter.print("}", 1);
		
		sprinter.print("int main(int argc, char *argv[])");
		sprinter.print("{");
		sprinter.print("    QApplication a(argc, argv);");
		sprinter.print("    FBGui_ w;");
		sprinter.print("    w.show();");
		sprinter.print("    return a.exec();");
		sprinter.print("}", 1);
		
	}
	
	/*****************************************************************************************
	QT SPECIFIC STUFF
	******************************************************************************************/
	
	/**
	 * Initialise top level simulation config files for QT simulation
	 * @param fileName - Name of function block output file (sim.cpp/h gets appended for writing)
	 * @param fbheader - .h file for the FB we are simulation
	 * @throws IOException
	 */
	public static void startQTSimFiles(String fileName, String fbheader) throws IOException {
		String cname = fileName + "sim.cpp";
		sprinter = new CodePrinter(cname);
		cname = fileName + "sim.hpp";
		shprinter = new CodePrinter(cname);		
		
		String simHeader = CodeGenerator.getFileName(cname);
		simDef = CodeGenerator.makeHeaderMacro(simHeader);
		shprinter.print("// This file is generated by FBC.", 1);
		shprinter.print("#ifndef " + simDef);
		shprinter.print("#define " + simDef, 1);
		if (FBtoStrl.opts.isCpp())
			shprinter.print("#include \"" + fbheader + "\"");
		else {
			shprinter.print("extern \"C\" {");
			shprinter.print("    #include \"" + fbheader + "\"");
			shprinter.print("}");
		}
		shprinter.print("#include <QPushButton>");
		shprinter.print("#include <QPushButton>");
		shprinter.print("#include <QHBoxLayout>");
		shprinter.print("#include <QVBoxLayout>");
		shprinter.print("#include <QCheckBox>");
		shprinter.print("#include <QLabel>");
		shprinter.print("#include <QLineEdit>");
		shprinter.print("#include <QGridLayout>");
		shprinter.print("#include <QGroupBox>");
		shprinter.print("#include <QWidget>", 1);
		
		sprinter.print("// This file is generated by FBC.", 1);
		sprinter.print("#include \"" + simHeader + "\"");
		sprinter.print("#include <QApplication>", 1);
		sprinter.print("OCheckBox::OCheckBox(QWidget* parent) : QCheckBox(parent), checked(false)");
		sprinter.print("{");
		sprinter.print("    connect(this, SIGNAL(clicked(bool)), this, SLOT(fixClicked()));");
		sprinter.print("}", 1);
		sprinter.print("void OCheckBox::setChecked(bool c)");
		sprinter.print("{");
		sprinter.print("    QCheckBox::setChecked(c);");
		sprinter.print("    checked = c;");
		sprinter.print("}", 1);
		sprinter.print("void OCheckBox::fixClicked(void)");
		sprinter.print("{");
		sprinter.print("    QCheckBox::setChecked(checked);");
		sprinter.print("}", 1);	
		
		
	}

	/* These COULD be groupped into one function.. but would need repetition of code from CGenerator */
	public static void startQTInterface() throws IOException
	{
		shprinter.print("typedef struct {");
		shprinter.indent();
	}
	
	public static void printQTEvents(String fbName, boolean inputs) throws IOException
	{
		if( inputs )
			shprinter.print(fbName + "IEvents _input;");
		else
			shprinter.print(fbName + "IEvents _output;");
	}


	public static void printQTData(String varDeclaration) throws IOException {
		shprinter.print(varDeclaration);
	}

	public static void endQTInterface(String fbName) throws IOException
	{
		shprinter.unindent();
		shprinter.print("} " + fbName + "Reg;", 1);
	}
	

}